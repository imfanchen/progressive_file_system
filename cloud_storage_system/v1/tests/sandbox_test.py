import unittest
from storage_system_impl import StorageSystemBasicImpl, StorageSystemAdvancedImpl

class SandboxTests(unittest.TestCase):
    """
    The test class below can be considered as a playground - feel free to modify it as you need, e.g.:
    - add your own custom tests
    - delete existing tests
    - modify test contents or expected output

    The results of tests from this file will always be at the beginning of the report generated by clicking the "Run" button.

    The results of these tests do not affect the final score (unless the project fails to build).
    """

    failureException = Exception


    def setUp(self):
        self.basic = StorageSystemBasicImpl()
        self.advanced = StorageSystemAdvancedImpl()


    def test_level_1(self):
        """Test Level 1: Basic File Operations"""
        db = self.basic
        # Test add_file
        self.assertTrue(db.add_file("/dir/file1.txt", 5))
        self.assertTrue(db.add_file("/dir/file2.txt", 20))
        self.assertTrue(db.add_file("/dir/deeper/file3.mov", 9))
        
        # Test adding duplicate file (should fail)
        self.assertFalse(db.add_file("/dir/file1.txt", 10))
        
        # Test get_file_size
        self.assertEqual(db.get_file_size("/dir/file1.txt"), 5)
        self.assertEqual(db.get_file_size("/dir/file2.txt"), 20)
        self.assertEqual(db.get_file_size("/dir/deeper/file3.mov"), 9)
        self.assertIsNone(db.get_file_size("/nonexistent.txt"))
        
        # Test delete_file
        self.assertEqual(db.delete_file("/dir/file1.txt"), 5)
        self.assertIsNone(db.get_file_size("/dir/file1.txt"))
        self.assertIsNone(db.delete_file("/nonexistent.txt"))
        
        # Test that we can add a file with the same name after deletion
        self.assertTrue(db.add_file("/dir/file1.txt", 15))
        self.assertEqual(db.get_file_size("/dir/file1.txt"), 15)

    def test_level_2(self):
        """Test Level 2: File Statistics with Prefix"""
        db = self.basic
        
        # Test add_file
        self.assertTrue(db.add_file("/dir/file1.txt", 5))
        self.assertTrue(db.add_file("/dir/file2.txt", 20))
        self.assertTrue(db.add_file("/dir/deeper/file3.mov", 9))
        
        # Test get_n_largest with "/dir" prefix
        self.assertEqual(db.get_n_largest("/dir", 2), ["/dir/file2.txt", "/dir/deeper/file3.mov"])
        
        # Test get_n_largest with "/dir/file" prefix
        self.assertEqual(db.get_n_largest("/dir/file", 2), ["/dir/file2.txt", "/dir/file1.txt"])
        
        # Test get_n_largest with non-existent prefix
        self.assertEqual(db.get_n_largest("/another_dir", 2), [])
        
        # Add a big file and test root prefix
        self.assertTrue(db.add_file("/big_file.mp4", 20))
        self.assertEqual(db.get_n_largest("/", 2), ["/big_file.mp4", "/dir/file2.txt"])
        
        # Test edge cases
        # Test with n larger than available files
        self.assertEqual(db.get_n_largest("/dir", 10), ["/dir/file2.txt", "/dir/deeper/file3.mov", "/dir/file1.txt", ])
        
        # Test with n=0
        self.assertEqual(db.get_n_largest("/dir", 0), [])
        
        # Test with files of same size (should sort lexicographically)
        self.assertTrue(db.add_file("/dir/file3.txt", 20))
        self.assertEqual(db.get_n_largest("/dir", 3), ["/dir/file2.txt", "/dir/file3.txt", "/dir/deeper/file3.mov"])

    def test_level_3(self):
        """Test Level 3: User Management"""
        db = self.advanced
        
        # Test add_user
        self.assertTrue(db.add_user("user1", 1000))
        self.assertTrue(db.add_user("user2", 2000))
        self.assertFalse(db.add_user("user1", 500))  # Duplicate user should fail
        
        # Test add_file_by - successful cases
        self.assertEqual(db.add_file_by("user1", "/user1/file1.txt", 100), 900)  # 1000 - 100
        self.assertEqual(db.add_file_by("user1", "/user1/file2.txt", 200), 700)  # 900 - 200
        self.assertEqual(db.add_file_by("user2", "/user2/file1.txt", 500), 1500)  # 2000 - 500
        
        # Test add_file_by - failure cases
        self.assertIsNone(db.add_file_by("nonexistent_user", "/file.txt", 100))  # User doesn't exist
        self.assertIsNone(db.add_file_by("user1", "/user1/file1.txt", 50))  # File already exists
        self.assertIsNone(db.add_file_by("user1", "/user1/file3.txt", 800))  # Exceeds capacity (700 remaining)
        
        # Test that admin can still add files (unlimited capacity)
        self.assertTrue(db.add_file("/admin/file1.txt", 5000))
        self.assertTrue(db.add_file("/admin/file2.txt", 10000))
        
        # Test file ownership and capacity tracking
        self.assertEqual(db.get_file_size("/user1/file1.txt"), 100)
        self.assertEqual(db.get_file_size("/user2/file1.txt"), 500)
        self.assertEqual(db.get_file_size("/admin/file1.txt"), 5000)
        
        # Test delete_file affects user capacity
        self.assertEqual(db.delete_file("/user1/file1.txt"), 100)
        self.assertEqual(db.add_file_by("user1", "/user1/file3.txt", 800), 0)

    def test_level_4(self):
        """Test Level 4: Backup and Restore"""
        db = self.advanced
        
        # Setup users and files
        self.assertTrue(db.add_user("user1", 1000))
        self.assertTrue(db.add_user("user2", 2000))
        
        # Add files for user1
        self.assertEqual(db.add_file_by("user1", "/user1/file1.txt", 100), 900)
        self.assertEqual(db.add_file_by("user1", "/user1/file2.txt", 200), 700)
        
        # Add files for user2
        self.assertEqual(db.add_file_by("user2", "/user2/file1.txt", 300), 1700)
        self.assertEqual(db.add_file_by("user2", "/user2/file2.txt", 400), 1300)
        
        # Test backup_user
        self.assertEqual(db.backup_user("user1"), 2)  # 2 files backed up
        self.assertIsNone(db.backup_user("nonexistent_user"))  # User doesn't exist
        
        # Test that backup overwrites previous backup
        self.assertEqual(db.add_file_by("user1", "/user1/file3.txt", 50), 650)
        self.assertEqual(db.backup_user("user1"), 3)  # Now 3 files backed up
        
        # Test restore_user - successful restore
        self.assertEqual(db.delete_file("/user1/file1.txt"), 100)
        self.assertEqual(db.delete_file("/user1/file2.txt"), 200)
        self.assertEqual(db.delete_file("/user1/file3.txt"), 50)
        self.assertEqual(db.restore_user("user1"), 3)  # 3 files restored
        self.assertEqual(db.get_file_size("/user1/file1.txt"), 100)
        self.assertEqual(db.get_file_size("/user1/file2.txt"), 200)
        self.assertEqual(db.get_file_size("/user1/file3.txt"), 50)
        
        # Test restore_user - no backup exists (should delete all user files)
        self.assertEqual(db.restore_user("user2"), 0)
        self.assertIsNone(db.get_file_size("/user2/file1.txt"))
        self.assertIsNone(db.get_file_size("/user2/file2.txt"))
    
        # Test restore_user - user doesn't exist
        self.assertIsNone(db.restore_user("nonexistent_user"))
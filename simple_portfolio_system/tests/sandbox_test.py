import unittest
from decimal import Decimal
from potfolio_system import Portfolio, maximize_gains


class SandboxTests(unittest.TestCase):
    """
    The test class below can be considered as a playground - feel free to modify it as you need, e.g.:
    - add your own custom tests
    - delete existing tests
    - modify test contents or expected output

    The results of tests from this file will always be at the beginning of the report generated by clicking the "Run" button.

    The results of these tests do not affect the final score (unless the project fails to build).
    """

    failureException = Exception

    # --- Level 1: Basic Portfolio Tests ---
    def test_level_1_case_1(self):
        """Portfolio buy and sell basic flow"""
        p = Portfolio(Decimal(1000))
        p.buy("APPL", 5, Decimal(100))  # cost = 500
        self.assertEqual(p.get_cash_balance(), Decimal(500))
        self.assertEqual(p.get_quantity_of_shares("APPL"), 5)

        p.sell("APPL", 2, Decimal(100))  # gain = 200
        self.assertEqual(p.get_cash_balance(), Decimal(700))
        self.assertEqual(p.get_quantity_of_shares("APPL"), 3)

    # --- Level 2: Price Scenarios ---
    def test_level_2_case_1(self):
        """Mixed up/down prices"""
        prices = [Decimal(170), Decimal(175), Decimal(172), Decimal(170), Decimal(180)]
        actions = maximize_gains(prices, Decimal(100000), "ABCD")
        # Check at least 1 BUY and 1 SELL
        buy_actions = [a for a in actions if a.action_type == "BUY"]
        sell_actions = [a for a in actions if a.action_type == "SELL"]
        self.assertTrue(len(buy_actions) > 0)
        self.assertTrue(len(sell_actions) > 0)

    def test_level_2_case_2(self):
        """No price change should result in only HOLD actions"""
        prices = [Decimal(170), Decimal(170), Decimal(170), Decimal(170), Decimal(170)]
        actions = maximize_gains(prices, Decimal(100000), "ABCD")
        self.assertTrue(all(a.action_type == "HOLD" for a in actions))

    def test_level_2_case_3(self):
        """Prices only going up should result in BUY then final SELL"""
        prices = [Decimal(170), Decimal(175), Decimal(178), Decimal(179), Decimal(180)]
        actions = maximize_gains(prices, Decimal(100000), "ABCD")
        first_action = actions[0]
        last_action = actions[-1]
        self.assertEqual(first_action.action_type, "BUY")
        self.assertEqual(last_action.action_type, "SELL")

    # --- Level 3: Prices only going down ---
    def test_level_2_case_4(self):
        """Prices going down only -> should not buy"""
        prices = [Decimal(170), Decimal(165), Decimal(158), Decimal(149), Decimal(137)]
        actions = maximize_gains(prices, Decimal(100000), "ABCD")
        self.assertTrue(all(a.action_type in ("HOLD") for a in actions))
        # No BUY expected
        self.assertFalse(any(a.action_type == "BUY" for a in actions))
        # No SELL expected
        self.assertFalse(any(a.action_type == "SELL" for a in actions))


if __name__ == "__main__":
    unittest.main()
import unittest
from bank_system_impl import BankSystemAdvancedImpl, BankSystemBasicImpl

class SandboxTests(unittest.TestCase):
    """
    The test class below can be considered as a playground - feel free to modify it as you need, e.g.:
    - add your own custom tests
    - delete existing tests
    - modify test contents or expected output

    The results of tests from this file will always be at the beginning of the report generated by clicking the "Run" button.

    The results of these tests do not affect the final score (unless the project fails to build).
    """

    failureException = Exception


    def setUp(self):
        self.basic = BankSystemBasicImpl()
        self.advanced = BankSystemAdvancedImpl()


    def test_level_1(self):
        db = self.basic
        self.assertEqual(db.create_account(1, "account1"), True)
        self.assertEqual(db.create_account(2, "account1"), False)
        self.assertEqual(db.create_account(3, "account2"), True)
        self.assertEqual(db.deposit(4, "non-existing", 200), None)
        self.assertEqual(db.deposit(5, "account1", 2700), 2700)
        self.assertEqual(db.pay(6, "non-existing", 200), None)
        self.assertEqual(db.pay(7, "account1", 2701), None)
        self.assertEqual(db.pay(8, "account1", 200), 2500)

    def test_level_2(self):
        db = self.basic
        self.assertEqual(db.create_account(1, "account1"), True)
        self.assertEqual(db.create_account(2, "account2"), True)
        self.assertEqual(db.create_account(3, "account3"), True)
        self.assertEqual(db.deposit(4, "account1", 2000), 2000)
        self.assertEqual(db.deposit(5, "account2", 3000), 3000)
        self.assertEqual(db.deposit(6, "account3", 4000), 4000)
        self.assertEqual(db.top_activity(7, 3), "account3(4000), account2(3000), account1(2000)")
        self.assertEqual(db.pay(8, "account1", 1500), 500)
        self.assertEqual(db.pay(9, "account2", 250), 2750)
        self.assertEqual(db.deposit(10, "account3", 250), 4250)
        self.assertEqual(db.top_activity(11, 3), "account3(4250), account1(3500), account2(3250)")

    def test_level_3(self):
        db = self.advanced
        self.assertEqual(db.create_account(1, "account1"), True)
        self.assertEqual(db.create_account(2, "account2"), True)
        self.assertEqual(db.deposit(3, "account1", 2000), 2000)
        self.assertEqual(db.deposit(4, "account2", 3000), 3000)
        self.assertEqual(db.transfer(5, "account1", "account2", 5000), "")
        self.assertEqual(db.transfer(16, "account1", "account2", 1000), "transfer1")
        self.assertEqual(db.accept_transfer(20, "account1", "transfer1"), False)
        self.assertEqual(db.accept_transfer(21, "non-existing", "transfer1"), False)
        self.assertEqual(db.accept_transfer(22, "account1", "transfer2"), False)
        self.assertEqual(db.accept_transfer(25, "account2", "transfer1"), True)
        self.assertEqual(db.accept_transfer(30, "account2", "transfer1"), False)
        self.assertEqual(db.transfer(40, "account1", "account2", 1000), "transfer2")
        self.assertEqual(db.accept_transfer(86445000, "account2", "transfer2"), False)
        self.assertEqual(db.transfer(86550000, "account1", "account1", 1000), "")

    def test_level_4(self):
        db = self.advanced
        self.assertEqual(db.create_account(1, "account1"), True)
        self.assertEqual(db.create_account(2, "account2"), True)
        self.assertEqual(db.deposit(3, "account1", 2000), 2000)
        self.assertEqual(db.deposit(4, "account2", 3000), 3000)
        self.assertEqual(db.merge_accounts(5, "account1", "account2"), True)
        self.assertEqual(db.get_balance("account2"), "5000")
        self.assertEqual(db.get_transaction_history("account2"), "[2000, 3000]")